/* NOTE FOR NAVIGATION: Please refer to the table of contents and respective codes below (including the dot at the end ie. C.Q1.), using ctrl+F to find each subsection. Thank you!*/

/*NOTE FOR COMMENTS: I decided to write out all of my comments before each query, rather than interspersing them throughout each query. I thought it would be easier to read this way!*/

/*
TABLE OF CONTENTS: 
A.CT1. Create Tables
A.CT2. Create Junction Table

B.IS1. Author Insert Statements
B.IS2. Book Insert Statements
B.IS3. Client Insert Statements
B.IS4. Borrower Insert Statements
B.CI1. Create Index Statements

C.Q1. Display all contents of the Clients table
C.Q2. First names, last names, ages and occupations of all clients
C.Q3. First and last names of clients that borrowed books in March 2018
C.Q4. First and last names of the top 5 authors clients borrowed in 2017
C.Q5. Nationalities of the least 5 authors that clients borrowed during the years 2015-2017
C.Q6. The book that was most borrowed during the years 2015-2017
C.Q7. Top borrowed genres for client born in years 1970-1980
C.Q8. Top 5 occupations that borrowed the most in 2016
C.Q9. Average number of borrowed books by job title
C.Q10. Create a VIEW and display the titles that were borrowed by at least 20% of clients
C.Q11. The top month of borrows in 2017
C.Q12. Average number of borrows by age
C.Q13. The oldest and the youngest clients of the library
C.Q14. First and last names of authors that wrote books in more than one genre

*/




-- Create Schema
CREATE DATABASE IF NOT EXISTS library;

-- Use Schema
USE library;

-- A.CT1. Create Tables

CREATE TABLE IF NOT EXISTS library.Author (
AuthorID int AUTO_INCREMENT PRIMARY KEY, 
AuthorFirstName VARCHAR(50) NOT NULL, 
AuthorLastName VARCHAR(50) NOT NULL, 
AuthorNationality VARCHAR(50) NOT NULL)
;

CREATE TABLE IF NOT EXISTS library.Book (
BookID int AUTO_INCREMENT PRIMARY KEY, 
BookTitle VARCHAR(50) NOT NULL, 
BookAuthor int NOT NULL, 
Genre VARCHAR(50) NOT NULL,
FOREIGN KEY (BookAuthor) REFERENCES Author(AuthorID))
;

CREATE TABLE IF NOT EXISTS library.Client (
ClientID int AUTO_INCREMENT PRIMARY KEY, 
ClientFirstName VARCHAR(50) NOT NULL, 
ClientLastName VARCHAR(50) NOT NULL, 
ClientDoB int NOT NULL, 
Occupation VARCHAR(50) NOT NULL)
;

CREATE TABLE IF NOT EXISTS library.Borrower (
BorrowID INT NOT NULL PRIMARY KEY, 
ClientID INT NOT NULL, 
BookID INT NOT NULL, 
BorrowDate DATE NOT NULL,
FOREIGN KEY (ClientID) REFERENCES Client(ClientID),
FOREIGN KEY (BookID) REFERENCES Book(BookID)
);

-- A.CT2. Create junction table for many to many relationship between client and borrower tables

CREATE TABLE IF NOT EXISTS library.Borrower_to_Client (
BorrowID INT NOT NULL,
ClientID INT NOT NULL,
PRIMARY KEY (BorrowID, ClientID),
FOREIGN KEY (BorrowID) REFERENCES library.Borrower(BorrowID),
FOREIGN KEY (ClientID) REFERENCES library.Client(ClientID))
;

-- B.IS1. Insert Statements

-- Author insert statements

INSERT INTO library.Author (AuthorID, AuthorFirstName, AuthorLastName, AuthorNationality) VALUES
(1, 'Sofia', 'Smith', 'Canada'),
(2, 'Maria', 'Brown', 'Brazil'),
(3, 'Elena', 'Martin', 'Mexico'),
(4, 'Zoe', 'Roy', 'France'),
(5, 'Sebastian', 'Lavoie', 'Canada'),
(6, 'Dylan', 'Garcia', 'Spain'),
(7, 'Ian', 'Cruz', 'Mexico'),
(8, 'Lucas', 'Smith', 'USA'),
(9, 'Fabian', 'Wilson', 'USA'),
(10, 'Liam', 'Taylor', 'Canada'),
(11, 'William', 'Thomas', 'Great Britain'),
(12, 'Logan', 'Moore', 'Canada'),
(13, 'Oliver', 'Martin', 'France'),
(14, 'Alysha', 'Thompson', 'Canada'),
(15, 'Isabelle', 'Lee', 'Canada'),
(16, 'Emily', 'Clark', 'USA'),
(17, 'John', 'Young', 'China'),
(18, 'David', 'Wright', 'Canada'),
(19, 'Thomas', 'Scott', 'Canada'),
(20, 'Helena', 'Adams', 'Canada'),
(21, 'Sofia', 'Carter', 'USA'),
(22, 'Liam', 'Parker', 'Canada'),
(23, 'Emily', 'Murphy', 'USA')
;

-- B.IS2. Book insert statements

INSERT INTO library.Book (BookID, BookTitle, BookAuthor, Genre) VALUES 
(1, 'Build your database system', 1, 'Science'),
(2, 'The red wall', 2, 'Fiction'),
(3, 'The perfect match', 3, 'Fiction'),
(4, 'Digital Logic', 4, 'Science'),
(5, 'How to be a great lawyer', 5, 'Law'),
(6, 'Manage successful negotiations', 6, 'Society'),
(7, 'Pollution today', 7, 'Science'),
(8, 'A gray park', 2, 'Fiction'),
(9, 'How to be rich in one year', 8, 'Humor'),
(10, 'Their bright fate', 9, 'Fiction'),
(11, 'Black lines', 10, 'Fiction'),
(12, 'History of theater', 11, 'Literature'),
(13, 'Electrical transformers', 12, 'Science'),
(14, 'Build your big data system', 1, 'Science'),
(15, 'Right and left', 13, 'Children'),
(16, 'Programming using Python', 1, 'Science'),
(17, 'Computer networks', 14, 'Science'),
(18, 'Performance evaluation', 15, 'Science'),
(19, 'Daily exercise', 16, 'Well being'),
(20, 'The silver uniform', 17, 'Fiction'),
(21, 'Industrial revolution', 18, 'History'),
(22, 'Green nature', 19, 'Well being'),
(23, 'Perfect football', 20, 'Well being'),
(24, 'The chocolate love', 21, 'Humor'),
(25, 'Director and leader', 22, 'Society'),
(26, 'Play football every week', 20, 'well being'),
(27, 'Maya the bee', 13, 'Children'),
(28, 'Perfect rugby', 20, 'Well being'),
(29, 'The end', 23, 'Fiction'),
(30, 'Computer security', 1, 'Science'),
(31, 'Participate', 22, 'Society'),
(32, 'Positive figures', 3, 'Fiction')
;


-- B.IS3. Client insert statements

INSERT INTO library.Client (ClientID, ClientFirstName, ClientLastName, ClientDoB, Occupation) VALUES 
(1, 'Kaiden', 'Hill', 2006, 'Student'),
(2, 'Alina', 'Morton', 2010, 'Student'),
(3, 'Fania', 'Brooks', 1983, 'Food Scientist'),
(4, 'Courtney', 'Jensen', 2006, 'Student'),
(5, 'Brittany', 'Hill', 1983, 'Firefighter'),
(6, 'Max', 'Rogers', 2005, 'Student'),
(7, 'Margaret', 'McCarthy', 1981, 'School Psychologist'),
(8, 'Julie', 'McCarthy', 1973, 'Professor'),
(9, 'Ken', 'McCarthy', 1974, 'Securities Clerk'),
(10, 'Britany', 'O''Quinn', 1984, 'Violinist'),
(11, 'Conner', 'Gardner', 1998, 'Licensed Massage Therapist'),
(12, 'Mya', 'Austin', 1960, 'Parquet Floor Layer'),
(13, 'Thierry', 'Rogers', 2004, 'Student'),
(14, 'Eloise', 'Rogers', 1984, 'Computer Security Manager'),
(15, 'Gerard', 'Jackson', 1979, 'Oil Exploration Engineer'),
(16, 'Randy', 'Day', 1986, 'Aircraft Electrician'),
(17, 'Jodie', 'Page', 1990, 'Manufacturing Director'),
(18, 'Coral', 'Rice', 1996, 'Window Washer'),
(19, 'Ayman', 'Austin', 2002, 'Student'),
(20, 'Jaxson', 'Austin', 1999, 'Repair Worker'),
(21, 'Joel', 'Austin', 1973, 'Police Officer'),
(22, 'Alina', 'Austin', 2010, 'Student'),
(23, 'Elin', 'Austin', 1962, 'Payroll Clerk'),
(24, 'Ophelia', 'Wolf', 2004, 'Student'),
(25, 'Eliot', 'McGuire', 1967, 'Dentist'),
(26, 'Peter', 'McKinney', 1968, 'Professor'),
(27, 'Annabella', 'Henry', 1974, 'Nurse'),
(28, 'Anastasia', 'Baker', 2001, 'Student'),
(29, 'Tyler', 'Baker', 1984, 'Police Officer'),
(30, 'Lilian', 'Ross', 1983, 'Insurance Agent'),
(31, 'Thierry', 'Arnold', 1975, 'Bus Driver'),
(32, 'Angelina', 'Rowe', 1979, 'Firefighter'),
(33, 'Marcia', 'Rowe', 1974, 'Health Educator'),
(34, 'Martin', 'Rowe', 1976, 'Ship Engineer'),
(35, 'Adeline', 'Rowe', 2005, 'Student'),
(36, 'Colette', 'Rowe', 1963, 'Professor'),
(37, 'Diane', 'Clark', 1975, 'Payroll Clerk'),
(38, 'Caroline', 'Clark', 1960, 'Dentist'),
(39, 'Dalton', 'Clayton', 1982, 'Police Officer'),
(40, 'Steve', 'Clayton', 1990, 'Bus Driver'),
(41, 'Melanie', 'Clayton', 1987, 'Computer Engineer'),
(42, 'Alana', 'Wilson', 2007, 'Student'),
(43, 'Carson', 'Byrne', 1995, 'Food Scientist'),
(44, 'Conrad', 'Byrne', 2007, 'Student'),
(45, 'Ryan', 'Porter', 2008, 'Student'),
(46, 'Elin', 'Porter', 1978, 'Computer Programmer'),
(47, 'Tyler', 'Harvey', 2007, 'Student'),
(48, 'Arya', 'Harvey', 2008, 'Student'),
(49, 'Serena', 'Harvey', 1978, 'School Teacher'),
(50, 'Lilly', 'Franklin', 1976, 'Doctor'),
(51, 'Mai', 'Franklin', 1994, 'Dentist'),
(52, 'John', 'Franklin', 1999, 'Firefighter'),
(53, 'Judy', 'Franklin', 1995, 'Firefighter'),
(54, 'Katy', 'Lloyd', 1992, 'School Teacher'),
(55, 'Tamara', 'Allen', 1963, 'Ship Engineer'),
(56, 'Maxim', 'Lyons', 1985, 'Police Officer'),
(57, 'Allan', 'Lyons', 1983, 'Computer Engineer'),
(58, 'Marc', 'Harris', 1980, 'School Teacher'),
(59, 'Elin', 'Young', 2009, 'Student'),
(60, 'Diana', 'Young', 2008, 'Student'),
(61, 'Diane', 'Young', 2006, 'Student'),
(62, 'Alana', 'Bird', 2003, 'Student'),
(63, 'Anna', 'Becker', 1979, 'Security Agent'),
(64, 'Katie', 'Grant', 1977, 'Manager'),
(65, 'Joan', 'Grant', 2010, 'Student'),
(66, 'Bryan', 'Bell', 2001, 'Student'),
(67, 'Belle', 'Miller', 1970, 'Professor'),
(68, 'Peggy', 'Stevens', 1990, 'Bus Driver'),
(69, 'Steve', 'Williamson', 1975, 'HR Clerk'),
(70, 'Tyler', 'Williamson', 1999, 'Doctor'),
(71, 'Izabelle', 'Williamson', 1990, 'Systems Analyst'),
(72, 'Annabel', 'Williamson', 1960, 'Cashier'),
(73, 'Mohamed', 'Waters', 1966, 'Insurance Agent'),
(74, 'Marion', 'Newman', 1970, 'Computer Programmer'),
(75, 'Ada', 'Williams', 1986, 'Computer Programmer'),
(76, 'Sean', 'Scott', 1983, 'Bus Driver'),
(77, 'Farrah', 'Scott', 1974, 'Ship Engineer'),
(78, 'Christine', 'Lambert', 1973, 'School Teacher'),
(79, 'Alysha', 'Lambert', 2007, 'Student'),
(80, 'Maia', 'Grant', 1984, 'School Teacher')
;

-- B.IS4. Borrower insert statements

INSERT INTO library.Borrower (BorrowID, ClientID, BookID, BorrowDate) VALUES 
(1, '35', '17', '2016-07-20'),
(2, '1', '3', '2017-04-19'),
(3, '42', '8', '2016-10-03'),
(4, '62', '16', '2016-04-05'),
(5, '53', '13', '2017-01-17'),
(6, '33', '15', '2015-11-26'),
(7, '40', '14', '2015-01-21'),
(8, '64', '2', '2017-09-10'),
(9, '56', '30', '2017-08-02'),
(10, '23', '2', '2018-06-28'),
(11, '46', '19', '2015-11-18'),
(12, '61', '20', '2015-11-24'),
(13, '58', '7', '2017-06-17'),
(14, '46', '16', '2017-02-12'),
(15, '80', '21', '2018-03-18'),
(16, '51', '23', '2015-09-01'),
(17, '49', '18', '2015-07-28'),
(18, '43', '18', '2015-11-04'),
(19, '30', '2', '2018-08-10'),
(20, '48', '24', '2015-05-13'),
(21, '71', '5', '2016-09-05'),
(22, '35', '3', '2016-07-03'),
(23, '57', '1', '2015-03-17'),
(24, '23', '25', '2017-08-16'),
(25, '20', '12', '2018-07-24'),
(26, '25', '7', '2015-01-31'),
(27, '72', '29', '2016-04-10'),
(28, '74', '20', '2017-07-31'),
(29, '53', '14', '2016-02-20'),
(30, '32', '10', '2017-07-24'),
(31, '12', '15', '2018-04-25'),
(32, '77', '13', '2017-06-09'),
(33, '30', '4', '2017-10-24'),
(34, '37', '24', '2016-01-14'),
(35, '27', '26', '2017-06-05'),
(36, '1', '16', '2018-05-06'),
(37, '21', '9', '2016-03-19'),
(38, '69', '28', '2017-03-29'),
(39, '17', '19', '2017-03-14'),
(40, '8', '9', '2016-04-22'),
(41, '63', '18', '2015-01-25'),
(42, '65', '20', '2016-10-10'),
(43, '51', '19', '2015-07-28'),
(44, '23', '12', '2017-01-25'),
(45, '17', '4', '2017-04-18'),
(46, '68', '5', '2016-09-06'),
(47, '46', '13', '2017-09-30'),
(48, '15', '13', '2017-07-05'),
(49, '11', '19', '2017-12-14'),
(50, '78', '15', '2017-01-26'),
(51, '47', '9', '2015-03-03'),
(52, '68', '7', '2016-05-26'),
(53, '37', '26', '2017-02-06'),
(54, '48', '27', '2015-12-30'),
(55, '9', '21', '2017-10-21'),
(56, '29', '8', '2018-04-01'),
(57, '64', '18', '2017-08-29'),
(58, '61', '26', '2018-02-21'),
(59, '39', '28', '2016-07-26'),
(60, '73', '18', '2018-08-22'),
(61, '11', '13', '2018-01-17'),
(62, '45', '6', '2016-07-20'),
(63, '33', '13', '2018-03-18'),
(64, '10', '17', '2016-06-06'),
(65, '28', '18', '2017-02-17'),
(66, '51', '3', '2016-12-09'),
(67, '29', '2', '2015-09-18'),
(68, '28', '30', '2017-09-14'),
(69, '74', '20', '2015-12-12'),
(70, '15', '22', '2015-01-14'),
(71, '57', '8', '2017-08-20'),
(72, '2', '5', '2015-01-18'),
(73, '74', '12', '2018-04-14'),
(74, '51', '10', '2016-02-25'),
(75, '25', '17', '2015-02-24'),
(76, '45', '21', '2017-02-10'),
(77, '27', '25', '2016-08-03'),
(78, '32', '28', '2016-06-15'),
(79, '71', '21', '2017-05-21'),
(80, '75', '26', '2016-05-03'),
(81, '56', '32', '2015-12-23'),
(82, '26', '32', '2015-05-16'),
(83, '66', '32', '2015-05-30'),
(84, '57', '18', '2017-09-15'),
(85, '40', '15', '2016-09-02'),
(86, '65', '4', '2017-08-17'),
(87, '54', '7', '2015-12-19'),
(88, '29', '4', '2017-07-22'),
(89, '44', '9', '2017-12-31'),
(90, '56', '31', '2015-06-13'),
(91, '17', '4', '2015-04-01'),
(92, '35', '16', '2018-07-19'),
(93, '22', '18', '2017-06-22'),
(94, '39', '24', '2015-05-29'),
(95, '63', '14', '2018-01-20'),
(96, '53', '21', '2016-07-31'),
(97, '40', '9', '2016-07-10'),
(98, '52', '4', '2017-04-05'),
(99, '27', '20', '2016-09-04'),
(100, '72', '29', '2015-12-06'),
(101, '49', '16', '2017-12-19'),
(102, '6', '12', '2016-12-04'),
(103, '74', '31', '2016-07-27'),
(104, '48', '32', '2016-06-29'),
(105, '69', '2', '2016-12-27'),
(106, '60', '32', '2017-10-29'),
(107, '45', '22', '2017-06-12'),
(108, '42', '15', '2017-05-14'),
(109, '79', '8', '2016-10-13'),
(110, '70', '18', '2016-12-04'),
(111, '34', '8', '2016-03-06'),
(112, '43', '8', '2015-12-19'),
(113, '42', '32', '2016-04-20'),
(114, '67', '5', '2017-03-06'),
(115, '80', '25', '2015-06-23'),
(116, '54', '11', '2017-05-03'),
(117, '34', '28', '2017-08-30'),
(118, '65', '20', '2017-08-26'),
(119, '61', '19', '2018-01-05'),
(120, '38', '12', '2018-01-17'),
(121, '51', '4', '2016-05-13'),
(122, '7', '16', '2016-03-17'),
(123, '46', '16', '2016-11-25'),
(124, '75', '30', '2018-08-12'),
(125, '72', '32', '2015-03-12'),
(126, '44', '17', '2015-06-15'),
(127, '68', '15', '2016-02-21'),
(128, '21', '1', '2016-06-19'),
(129, '14', '25', '2016-10-10'),
(130, '68', '21', '2016-05-27'),
(131, '35', '20', '2015-03-19'),
(132, '16', '27', '2016-08-08'),
(133, '79', '31', '2018-03-07'),
(134, '14', '17', '2018-04-28'),
(135, '29', '28', '2018-03-11'),
(136, '41', '4', '2018-08-08'),
(137, '42', '3', '2016-02-23'),
(138, '45', '3', '2017-07-10'),
(139, '36', '16', '2018-07-19'),
(140, '36', '30', '2015-08-07'),
(141, '54', '32', '2018-03-14'),
(142, '61', '15', '2017-03-28'),
(143, '1', '13', '2018-05-17'),
(144, '43', '1', '2015-05-14'),
(145, '37', '14', '2015-07-30'),
(146, '62', '17', '2015-09-19'),
(147, '50', '22', '2016-12-02'),
(148, '45', '1', '2016-07-24'),
(149, '32', '17', '2018-03-10'),
(150, '13', '28', '2016-02-14'),
(151, '15', '9', '2018-08-11'),
(152, '10', '19', '2018-08-29'),
(153, '66', '3', '2016-11-27'),
(154, '68', '29', '2017-07-12'),
(155, '21', '14', '2018-06-27'),
(156, '35', '9', '2016-01-22'),
(157, '17', '24', '2016-08-25'),
(158, '40', '21', '2015-07-09'),
(159, '1', '24', '2016-03-28'),
(160, '70', '27', '2015-07-10'),
(161, '80', '26', '2016-04-24'),
(162, '29', '5', '2015-10-18'),
(163, '76', '12', '2018-04-25'),
(164, '22', '4', '2016-12-24'),
(165, '2', '2', '2017-10-26'),
(166, '35', '13', '2016-02-28'),
(167, '40', '8', '2017-10-02'),
(168, '68', '9', '2016-01-03'),
(169, '32', '5', '2016-11-13'),
(170, '34', '17', '2016-09-15'),
(171, '34', '16', '2018-04-13'),
(172, '80', '30', '2016-10-13'),
(173, '20', '32', '2015-11-17'),
(174, '36', '10', '2017-09-01'),
(175, '78', '12', '2018-06-27'),
(176, '57', '8', '2016-03-22'),
(177, '75', '11', '2017-06-27'),
(178, '71', '10', '2015-08-01'),
(179, '48', '22', '2015-09-29'),
(180, '19', '16', '2016-02-21'),
(181, '79', '30', '2018-08-20'),
(182, '70', '13', '2016-09-16'),
(183, '30', '6', '2017-02-10'),
(184, '45', '12', '2017-10-12'),
(185, '30', '27', '2016-11-23'),
(186, '26', '3', '2016-08-13'),
(187, '66', '6', '2017-01-14'),
(188, '47', '15', '2016-02-10'),
(189, '53', '30', '2018-08-08'),
(190, '80', '16', '2016-03-31'),
(191, '70', '13', '2018-02-03'),
(192, '14', '25', '2016-03-27'),
(193, '46', '22', '2016-01-13'),
(194, '30', '32', '2015-08-06'),
(195, '60', '14', '2016-11-27'),
(196, '14', '13', '2018-05-23'),
(197, '71', '15', '2016-06-22'),
(198, '38', '21', '2015-12-27'),
(199, '69', '30', '2017-04-29'),
(200, '49', '31', '2018-06-03'),
(201, '28', '28', '2015-05-29'),
(202, '49', '3', '2016-08-30'),
(203, '75', '1', '2015-10-29'),
(204, '78', '3', '2017-05-12'),
(205, '43', '18', '2015-03-25'),
(206, '27', '21', '2016-02-22'),
(207, '64', '22', '2015-04-03'),
(208, '21', '11', '2017-12-09'),
(209, '66', '29', '2016-12-20'),
(210, '45', '13', '2017-04-15'),
(211, '48', '30', '2015-01-31'),
(212, '20', '25', '2017-12-20'),
(213, '41', '20', '2018-01-29'),
(214, '51', '12', '2015-07-05'),
(215, '5', '1', '2015-04-12'),
(216, '40', '3', '2018-02-24'),
(217, '79', '4', '2018-06-27'),
(218, '15', '10', '2016-11-01'),
(219, '42', '22', '2016-12-28'),
(220, '17', '9', '2018-01-29'),
(221, '38', '13', '2016-05-09'),
(222, '79', '2', '2017-12-06'),
(223, '74', '3', '2015-12-07'),
(224, '46', '8', '2016-06-05'),
(225, '78', '22', '2018-08-11'),
(226, '45', '2', '2015-04-20'),
(227, '72', '31', '2015-11-11'),
(228, '18', '17', '2015-03-21'),
(229, '29', '3', '2017-08-13'),
(230, '66', '11', '2018-06-05'),
(231, '36', '16', '2016-04-28'),
(232, '26', '2', '2016-10-23'),
(233, '32', '1', '2017-10-31'),
(234, '62', '14', '2017-07-25'),
(235, '12', '4', '2015-07-08'),
(236, '38', '32', '2015-02-24'),
(237, '29', '16', '2016-07-28'),
(238, '36', '25', '2017-05-07'),
(239, '76', '7', '2015-06-13'),
(240, '28', '16', '2016-08-15'),
(241, '60', '13', '2016-08-26'),
(242, '8', '3', '2017-07-28'),
(243, '25', '1', '2016-07-30'),
(244, '62', '29', '2018-08-24'),
(245, '51', '8', '2016-09-01'),
(246, '27', '23', '2015-02-08'),
(247, '69', '12', '2018-06-25'),
(248, '51', '12', '2015-07-04'),
(249, '7', '4', '2015-05-01'),
(250, '31', '15', '2017-10-29'),
(251, '14', '23', '2015-01-15'),
(252, '14', '1', '2018-05-21'),
(253, '39', '25', '2015-12-26'),
(254, '79', '24', '2016-05-31'),
(255, '40', '15', '2016-03-18'),
(256, '51', '13', '2018-04-13'),
(257, '61', '1', '2015-02-11'),
(258, '15', '24', '2018-03-02'),
(259, '10', '22', '2018-01-21'),
(260, '67', '10', '2017-07-08'),
(261, '79', '11', '2016-12-11'),
(262, '19', '32', '2016-05-04'),
(263, '35', '11', '2017-08-01'),
(264, '27', '13', '2017-12-15'),
(265, '30', '22', '2015-12-22'),
(266, '8', '7', '2015-06-26'),
(267, '70', '9', '2016-03-20'),
(268, '56', '18', '2016-01-29'),
(269, '13', '19', '2015-03-06'),
(270, '61', '2', '2016-06-18'),
(271, '47', '13', '2017-09-18'),
(272, '30', '22', '2016-02-19'),
(273, '18', '22', '2016-12-31'),
(274, '34', '29', '2017-10-27'),
(275, '32', '21', '2015-06-03'),
(276, '9', '28', '2016-03-30'),
(277, '62', '24', '2015-03-23'),
(278, '44', '22', '2017-04-29'),
(279, '27', '5', '2015-03-25'),
(280, '61', '28', '2017-07-14'),
(281, '5', '13', '2016-12-04'),
(282, '43', '19', '2018-03-15'),
(283, '34', '19', '2016-06-05'),
(284, '35', '5', '2018-02-19'),
(285, '13', '12', '2016-09-23'),
(286, '74', '18', '2016-12-26'),
(287, '70', '31', '2017-08-15'),
(288, '42', '17', '2016-06-15'),
(289, '51', '24', '2018-07-30'),
(290, '45', '30', '2015-01-15'),
(291, '70', '17', '2017-10-07'),
(292, '77', '7', '2017-01-06'),
(293, '74', '25', '2015-09-25'),
(294, '47', '14', '2018-02-01'),
(295, '10', '2', '2017-04-18'),
(296, '16', '21', '2016-10-03'),
(297, '48', '5', '2016-09-17'),
(298, '72', '3', '2017-02-10'),
(299, '26', '23', '2016-03-01'),
(300, '49', '23', '2016-10-25')
;


-- B.CI1. Create Indexes

CREATE INDEX Nationality_idx
ON Author(AuthorNationality);

CREATE INDEX Author_Last_Name_First_Name_idx
ON Author(AuthorLastName, AuthorFirstName);

CREATE INDEX  Author_First_Name_idx
ON Author(AuthorFirstName);

CREATE INDEX Genre
ON book(Genre);

CREATE INDEX Book_Author_idx
ON book(BookAuthor);

CREATE INDEX Occupation_idx
ON Client(Occupation);

CREATE INDEX Client_Last_Name_First_Name_idx
ON Client(ClientLastName, ClientFirstName);

CREATE INDEX Client_First_Name_idx
ON Client(ClientFirstName);

CREATE INDEX Date_Of_Birth_idx
ON Client(ClientDoB);

CREATE INDEX Borrow_Date_idx
ON Borrower(BorrowDate);

CREATE INDEX Book_ID_idx
ON Borrower(BookID);

CREATE INDEX Client_ID_idx
ON Borrower(ClientID);







-- C. Queries




-- C.Q1. Display all contents of the Clients table

-- Self Explanatory

SELECT * 
FROM Client;

--Results: 

ClientID, ClientFirstName, ClientLastName, ClientDoB, Occupation
'1', 'Kaiden', 'Hill', '2006', 'Student'
'2', 'Alina', 'Morton', '2010', 'Student'
'3', 'Fania', 'Brooks', '1983', 'Food Scientist'
'4', 'Courtney', 'Jensen', '2006', 'Student'
'5', 'Brittany', 'Hill', '1983', 'Firefighter'
'6', 'Max', 'Rogers', '2005', 'Student'
'7', 'Margaret', 'McCarthy', '1981', 'School Psychologist'
'8', 'Julie', 'McCarthy', '1973', 'Professor'
'9', 'Ken', 'McCarthy', '1974', 'Securities Clerk'
'10', 'Britany', 'O''Quinn', '1984', 'Violinist'
'11', 'Conner', 'Gardner', '1998', 'Licensed Massage Therapist'
'12', 'Mya', 'Austin', '1960', 'Parquet Floor Layer'
'13', 'Thierry', 'Rogers', '2004', 'Student'
'14', 'Eloise', 'Rogers', '1984', 'Computer Security Manager'
'15', 'Gerard', 'Jackson', '1979', 'Oil Exploration Engineer'
'16', 'Randy', 'Day', '1986', 'Aircraft Electrician'
'17', 'Jodie', 'Page', '1990', 'Manufacturing Director'
'18', 'Coral', 'Rice', '1996', 'Window Washer'
'19', 'Ayman', 'Austin', '2002', 'Student'
'20', 'Jaxson', 'Austin', '1999', 'Repair Worker'
'21', 'Joel', 'Austin', '1973', 'Police Officer'
'22', 'Alina', 'Austin', '2010', 'Student'
'23', 'Elin', 'Austin', '1962', 'Payroll Clerk'
'24', 'Ophelia', 'Wolf', '2004', 'Student'
'25', 'Eliot', 'McGuire', '1967', 'Dentist'
'26', 'Peter', 'McKinney', '1968', 'Professor'
'27', 'Annabella', 'Henry', '1974', 'Nurse'
'28', 'Anastasia', 'Baker', '2001', 'Student'
'29', 'Tyler', 'Baker', '1984', 'Police Officer'
'30', 'Lilian', 'Ross', '1983', 'Insurance Agent'
'31', 'Thierry', 'Arnold', '1975', 'Bus Driver'
'32', 'Angelina', 'Rowe', '1979', 'Firefighter'
'33', 'Marcia', 'Rowe', '1974', 'Health Educator'
'34', 'Martin', 'Rowe', '1976', 'Ship Engineer'
'35', 'Adeline', 'Rowe', '2005', 'Student'
'36', 'Colette', 'Rowe', '1963', 'Professor'
'37', 'Diane', 'Clark', '1975', 'Payroll Clerk'
'38', 'Caroline', 'Clark', '1960', 'Dentist'
'39', 'Dalton', 'Clayton', '1982', 'Police Officer'
'40', 'Steve', 'Clayton', '1990', 'Bus Driver'
'41', 'Melanie', 'Clayton', '1987', 'Computer Engineer'
'42', 'Alana', 'Wilson', '2007', 'Student'
'43', 'Carson', 'Byrne', '1995', 'Food Scientist'
'44', 'Conrad', 'Byrne', '2007', 'Student'
'45', 'Ryan', 'Porter', '2008', 'Student'
'46', 'Elin', 'Porter', '1978', 'Computer Programmer'
'47', 'Tyler', 'Harvey', '2007', 'Student'
'48', 'Arya', 'Harvey', '2008', 'Student'
'49', 'Serena', 'Harvey', '1978', 'School Teacher'
'50', 'Lilly', 'Franklin', '1976', 'Doctor'
'51', 'Mai', 'Franklin', '1994', 'Dentist'
'52', 'John', 'Franklin', '1999', 'Firefighter'
'53', 'Judy', 'Franklin', '1995', 'Firefighter'
'54', 'Katy', 'Lloyd', '1992', 'School Teacher'
'55', 'Tamara', 'Allen', '1963', 'Ship Engineer'
'56', 'Maxim', 'Lyons', '1985', 'Police Officer'
'57', 'Allan', 'Lyons', '1983', 'Computer Engineer'
'58', 'Marc', 'Harris', '1980', 'School Teacher'
'59', 'Elin', 'Young', '2009', 'Student'
'60', 'Diana', 'Young', '2008', 'Student'
'61', 'Diane', 'Young', '2006', 'Student'
'62', 'Alana', 'Bird', '2003', 'Student'
'63', 'Anna', 'Becker', '1979', 'Security Agent'
'64', 'Katie', 'Grant', '1977', 'Manager'
'65', 'Joan', 'Grant', '2010', 'Student'
'66', 'Bryan', 'Bell', '2001', 'Student'
'67', 'Belle', 'Miller', '1970', 'Professor'
'68', 'Peggy', 'Stevens', '1990', 'Bus Driver'
'69', 'Steve', 'Williamson', '1975', 'HR Clerk'
'70', 'Tyler', 'Williamson', '1999', 'Doctor'
'71', 'Izabelle', 'Williamson', '1990', 'Systems Analyst'
'72', 'Annabel', 'Williamson', '1960', 'Cashier'
'73', 'Mohamed', 'Waters', '1966', 'Insurance Agent'
'74', 'Marion', 'Newman', '1970', 'Computer Programmer'
'75', 'Ada', 'Williams', '1986', 'Computer Programmer'
'76', 'Sean', 'Scott', '1983', 'Bus Driver'
'77', 'Farrah', 'Scott', '1974', 'Ship Engineer'
'78', 'Christine', 'Lambert', '1973', 'School Teacher'
'79', 'Alysha', 'Lambert', '2007', 'Student'
'80', 'Maia', 'Grant', '1984', 'School Teacher'





-- C.Q2. First names, last names, approximate ages (current year = 2025) and occupations of all clients

/*Here I subtract the ClientDoB (Which is a 4 digit int) from 2025 to get the approx. current age of the client */

SELECT ClientFirstName, ClientLastName, 2025 - ClientDoB AS Current_Age, Occupation
FROM Client;

-- Results: 

ClientFirstName, ClientLastName, Current_Age, Occupation
'Kaiden', 'Hill', '19', 'Student'
'Alina', 'Morton', '15', 'Student'
'Fania', 'Brooks', '42', 'Food Scientist'
'Courtney', 'Jensen', '19', 'Student'
'Brittany', 'Hill', '42', 'Firefighter'
'Max', 'Rogers', '20', 'Student'
'Margaret', 'McCarthy', '44', 'School Psychologist'
'Julie', 'McCarthy', '52', 'Professor'
'Ken', 'McCarthy', '51', 'Securities Clerk'
'Britany', 'O\'Quinn', '41', 'Violinist'
'Conner', 'Gardner', '27', 'Licensed Massage Therapist'
'Mya', 'Austin', '65', 'Parquet Floor Layer'
'Thierry', 'Rogers', '21', 'Student'
'Eloise', 'Rogers', '41', 'Computer Security Manager'
'Gerard', 'Jackson', '46', 'Oil Exploration Engineer'
'Randy', 'Day', '39', 'Aircraft Electrician'
'Jodie', 'Page', '35', 'Manufacturing Director'
'Coral', 'Rice', '29', 'Window Washer'
'Ayman', 'Austin', '23', 'Student'
'Jaxson', 'Austin', '26', 'Repair Worker'
'Joel', 'Austin', '52', 'Police Officer'
'Alina', 'Austin', '15', 'Student'
'Elin', 'Austin', '63', 'Payroll Clerk'
'Ophelia', 'Wolf', '21', 'Student'
'Eliot', 'McGuire', '58', 'Dentist'
'Peter', 'McKinney', '57', 'Professor'
'Annabella', 'Henry', '51', 'Nurse'
'Anastasia', 'Baker', '24', 'Student'
'Tyler', 'Baker', '41', 'Police Officer'
'Lilian', 'Ross', '42', 'Insurance Agent'
'Thierry', 'Arnold', '50', 'Bus Driver'
'Angelina', 'Rowe', '46', 'Firefighter'
'Marcia', 'Rowe', '51', 'Health Educator'
'Martin', 'Rowe', '49', 'Ship Engineer'
'Adeline', 'Rowe', '20', 'Student'
'Colette', 'Rowe', '62', 'Professor'
'Diane', 'Clark', '50', 'Payroll Clerk'
'Caroline', 'Clark', '65', 'Dentist'
'Dalton', 'Clayton', '43', 'Police Officer'
'Steve', 'Clayton', '35', 'Bus Driver'
'Melanie', 'Clayton', '38', 'Computer Engineer'
'Alana', 'Wilson', '18', 'Student'
'Carson', 'Byrne', '30', 'Food Scientist'
'Conrad', 'Byrne', '18', 'Student'
'Ryan', 'Porter', '17', 'Student'
'Elin', 'Porter', '47', 'Computer Programmer'
'Tyler', 'Harvey', '18', 'Student'
'Arya', 'Harvey', '17', 'Student'
'Serena', 'Harvey', '47', 'School Teacher'
'Lilly', 'Franklin', '49', 'Doctor'
'Mai', 'Franklin', '31', 'Dentist'
'John', 'Franklin', '26', 'Firefighter'
'Judy', 'Franklin', '30', 'Firefighter'
'Katy', 'Lloyd', '33', 'School Teacher'
'Tamara', 'Allen', '62', 'Ship Engineer'
'Maxim', 'Lyons', '40', 'Police Officer'
'Allan', 'Lyons', '42', 'Computer Engineer'
'Marc', 'Harris', '45', 'School Teacher'
'Elin', 'Young', '16', 'Student'
'Diana', 'Young', '17', 'Student'
'Diane', 'Young', '19', 'Student'
'Alana', 'Bird', '22', 'Student'
'Anna', 'Becker', '46', 'Security Agent'
'Katie', 'Grant', '48', 'Manager'
'Joan', 'Grant', '15', 'Student'
'Bryan', 'Bell', '24', 'Student'
'Belle', 'Miller', '55', 'Professor'
'Peggy', 'Stevens', '35', 'Bus Driver'
'Steve', 'Williamson', '50', 'HR Clerk'
'Tyler', 'Williamson', '26', 'Doctor'
'Izabelle', 'Williamson', '35', 'Systems Analyst'
'Annabel', 'Williamson', '65', 'Cashier'
'Mohamed', 'Waters', '59', 'Insurance Agent'
'Marion', 'Newman', '55', 'Computer Programmer'
'Ada', 'Williams', '39', 'Computer Programmer'
'Sean', 'Scott', '42', 'Bus Driver'
'Farrah', 'Scott', '51', 'Ship Engineer'
'Christine', 'Lambert', '52', 'School Teacher'
'Alysha', 'Lambert', '18', 'Student'
'Maia', 'Grant', '41', 'School Teacher'





-- C.Q3. First and last names of clients that borrowed books in March 2018

/* To Retrieve the client first and last names I need to make the connection from Client to Borrower with an INNER JOIN on ClientID, which gives me access to the respective BorrowDates. The LIKE statement filters for March 2018*/

SELECT ClientFirstName, ClientLastName, Borrower.BorrowDate
FROM Client INNER JOIN Borrower ON Client.ClientID = Borrower.ClientID
WHERE BorrowDate LIKE "2018-03-__";
 
-- RESULTS: 

ClientFirstName, ClientLastName, BorrowDate
'Tyler', 'Baker'
'Carson', 'Byrne'
'Maia', 'Grant'
'Gerard', 'Jackson'
'Alysha', 'Lambert'
'Katy', 'Lloyd'
'Angelina', 'Rowe'
'Marcia', 'Rowe'





-- C.Q4. First and last names of the top 5 authors clients borrowed in 2017

/* Here I need to group the top 5 authors according to how often their Borrower.BookID occurs in Borrower. To do this, I inner join Author to Book and then Author to Borrower to create the bridge on BookAuthor/Author.AuthorID and Book.BookID/Borrower.BookID. 

Now I can count Borrower.BookID and use it for the ORDER BY clause. I group by Author.AuthorID to easily SELECT the AuthorFirstName and AuthorLastName. I use the alias NumOfBorrows to ensure that the compiler knows to use the final count of NumOfBorrows when executing the ORDER BY clause, since it doesn't give the right data set without it. 

I make use of DESC and LIMIT 5 to get the highest 5 according to the COUNT alias NumOfBorrows.*/


SELECT AuthorFirstName, AuthorLastName, COUNT(Borrower.BookID) AS NumOfBorrows
FROM Book INNER JOIN Borrower ON Book.BookID = Borrower.BookID
INNER JOIN Author ON Book.BookAuthor = Author.AuthorID
WHERE Borrower.BorrowDate LIKE "2017%"
GROUP BY Author.AuthorID
ORDER BY NumOfBorrows DESC
LIMIT 5
;

-- RESULTS: 

AuthorFirstName, AuthorLastName, NumOfBorrows
'Sofia', 'Smith', '7'
'Elena', 'Martin', '7'
'Logan', 'Moore', '7'
'Maria', 'Brown', '6'
'Zoe', 'Roy', '5'




-- C.Q5. Nationalities of the least 5 authors that clients borrowed during the years 2015-2017

/* First I find the borrow count of each BookID using an INNER JOIN to connect Book and Borrower on BookID. I take the borrow count by counting Borrower.BookID and grouping by BookTitle and AuthorNationality. 

Now that I have access to Book, I can INNER JOIN Book with Author on BookAuthor = AuthorID to reach Author Nationality. I limit 5 and Order by Borrow_Count ASC to achieve the desired result.*/

SELECT AuthorNationality, COUNT(Borrower.BookID) AS Borrow_Count
FROM Borrower
INNER JOIN Book ON Borrower.BookID = Book.BookID
INNER JOIN Author ON Author.AuthorID = Book.BookAuthor
WHERE BorrowDate BETWEEN '2015-01-01' AND '2017-12-31'
GROUP BY AUthorID, AuthorNationality
ORDER BY Borrow_Count ASC
LIMIT 5
;

--RESULTS: 

AuthorNationality, Borrow_Count
'Spain', '3'
'USA', '5'
'Canada', '5'
'Great Britain', '6'
'USA', '6'





-- C.Q6. The book that was most borrowed during the years 2015-2017

/*Here I need to link tables Book and Borrower using INNER JOIN on BookID. From there, I count the Borrower.BookIDs (Alias: NumOfBorrows) using GROUP BY BookTitle, filtering for BorrowDates between 2015 and 2017. 

The rest is pretty simple, as I can just organize the results according to ORDER BY, LIMIT, and DESC.*/

SELECT BookTitle, COUNT(Borrower.BookID) AS NumOfBorrows
FROM Book
INNER JOIN Borrower ON Book.BookID = Borrower.BookID
WHERE BorrowDate BETWEEN "2015-01-01" AND "2017-12-31"
GROUP BY Book.BookID
ORDER BY NumOfBorrows DESC
LIMIT 1
;

-- RESULTS: 

BookTitle, NumOfBorrows
'The perfect match', '13'




-- C.Q7. Top borrowed genres for client born in years 1970-1980

/* I first need to link Book.BookId to Borrower.BookID. 
From there I will link Borrower.ClientID to Client.ClientID. In summary, my logic is:  

Book: 		Genre, BookID
Borrower:    	       BookID, ClientID
Client:              	       ClientID, ClientDoB

I COUNT Borrower.BookID and GROUP BY Genre to find the number of times each genre was borrowed. 
I also use the WHERE clause to filter for Client.ClientDoB to find DoBs between 1970 and 1980. Ordering by DESC should get the popular genres towards the top. */

SELECT Genre, COUNT(Borrower.BookID) AS NumBorrowed
FROM Book
INNER JOIN Borrower ON Book.BookID = Borrower.BookID
Inner JOIN Client ON Borrower.ClientID = Client.ClientID
WHERE ClientDOB BETWEEN '1970' AND '1980'
GROUP BY Genre
ORDER BY NumBorrowed DESC
;

RESULTS: 

Genre, NumBorrowed
'Science', '24'
'Fiction', '16'
'Well being', '15'
'Humor', '5'
'Society', '4'
'Law', '3'
'Literature', '3'
'Children', '3'
'History', '3'




-- C.Q8. Top 5 occupations that borrowed the most in 2016

/* The two tables required here are Borrower and Client, and I INNER JOIN them on ClientID. I COUNT bookID and select for Occupation, and filter for BorrowDates that start with 2016. I LIMIT by 5 and DESC to find the top 5. I use an alias to ensure that the compiler takes the counted number in the ORDER BY clause.*/

SELECT Occupation, COUNT(borrower.BookID) AS NumBorrowed
FROM Client
INNER JOIN Borrower ON Client.ClientID = Borrower.ClientID
WHERE BorrowDate LIKE "2016%"
GROUP BY Occupation
ORDER BY NumBorrowed DESC
LIMIT 5
;

Occupation, NumBorrowed
'Student', '32'
'Bus Driver', '8'
'Dentist', '6'
'Computer Programmer', '6'
'Police Officer', '5'


-- C.Q9. Average number of borrowed books by job title

/*If I'm understanding the question properly, I need to find the average number of borrowed books that each individual client/job holder borrowed. In order to do that, I need to create a subquery that first counts up the number of borrowed books and groups by both ClientID and Occupation. This will give a table that gives the counts of borrowed books by individual ClientIDs and Occupations. From this table, I'm able to take the averages of the counts according to occupation to achieve the proper result.*/

SELECT Occupation, AVG(NumBorrows) AS Avg_Borrows
FROM (
	SELECT Client.Occupation, COUNT(Borrower.BookID) AS NumBorrows
	FROM Client
	INNER JOIN Borrower ON Client.ClientID = Borrower.ClientID
	GROUP BY Client.ClientID, Occupation
	)count_subquery
GROUP BY Occupation
ORDER BY Avg_Borrows DESC
;
'Nurse', '7.0000'
'Computer Security Manager', '6.0000'
'Computer Programmer', '5.6667'
'Dentist', '5.6667'
'Cashier', '5.0000'
'Food Scientist', '5.0000'
'Manufacturing Director', '5.0000'
'Oil Exploration Engineer', '5.0000'
'Police Officer', '4.5000'
'Student', '4.4211'
'Bus Driver', '4.0000'
'Doctor', '4.0000'
'HR Clerk', '4.0000'
'Insurance Agent', '4.0000'
'Ship Engineer', '4.0000'
'Systems Analyst', '4.0000'
'Violinist', '4.0000'
'School Teacher', '3.6000'
'Professor', '3.5000'
'Firefighter', '3.2500'
'Computer Engineer', '3.0000'
'Manager', '3.0000'
'Payroll Clerk', '3.0000'
'Repair Worker', '3.0000'
'Aircraft Electrician', '2.0000'
'Health Educator', '2.0000'
'Licensed Massage Therapist', '2.0000'
'Parquet Floor Layer', '2.0000'
'School Psychologist', '2.0000'
'Securities Clerk', '2.0000'
'Security Agent', '2.0000'
'Window Washer', '2.0000'

-- C.Q10. Create a VIEW and display the titles that were borrowed by at least 20% of clients

/* First I want to display the titles and number of times borrowed using SELECT BookTitle and COUNT(DISTINCT ClientID), grouping by BookTitle to concentrate the results. I inner join Borrower on BookID to connect the two tables. Then, I use HAVING with a small SELECT clause to ensure that the results show books that only meet the condition (Total distinct ClientID count / 5) 

After all is said and done, I make the view and use the SELECT statement to show it.*/

CREATE VIEW FrequentBorrows AS
SELECT BookTitle, COUNT(DISTINCT Borrower.ClientID) AS Distinct_Borrows
FROM Book
INNER JOIN Borrower ON Book.BookID = Borrower.BookID
GROUP BY BookTitle
HAVING Distinct_Borrows >= (SELECT COUNT(DISTINCT Borrower.ClientID) FROM Borrower) / 5
;

SELECT *
FROM FrequentBorrows
;

-- RESULTS: 
BookTitle, Distinct_Borrows
'Electrical transformers', '17'



-- C.Q11. The top month of borrows in 2017

-- For this one the Month() function can be conveniently used to extract the month out of the BorrowDate column in a select statement. From there, I have to count the total number of rows in Borrower, filtering BorrowDates by LIKE '2017%'. After Grouping by BorrowMonth and ordering in DESC, I get the following query and result. There is a three way tie, but I'll only display the top result to match the question prompt.


SELECT MONTH(BorrowDate) AS ExtractedMonth, COUNT(*) AS Times_Borrowed
FROM Borrower
WHERE BorrowDate LIKE '2017%'
GROUP BY ExtractedMonth
ORDER BY Times_Borrowed DESC
LIMIT 1
;


-- Results: 

ExtractedMonth, Times_Borrowed
'7', '10'


-- C.Q12. Average number of borrows by age

/* I need to first make a subquery that COUNTs the number of times a ClientID borrowed (NumBorrows), SELECTing ClientDoB and Borrower.ClientID for use in the outer query. From there, I perform the AVG function on NumBorrows and group by ClientDoB to acquire the Average number of borrows by DoB. I rename the DoB column to "Age" and subtract 2025 by DoB to get the current age.*/


SELECT Age, AVG(Num_Borrows) AS Average_Borrows
FROM (
	SELECT (2025 - ClientDoB) AS Age, Borrower.ClientID, COUNT(Borrower.ClientID) AS Num_Borrows
	FROM Borrower
	INNER JOIN Client ON Borrower.ClientID = Client.ClientID
	GROUP BY Borrower.ClientID
	ORDER BY Num_Borrows
)Get_Num_Borrows
GROUP BY AGE
ORDER BY Age DESC

RESULTS: 

Age, Average_Borrows
'65', '3.6667'
'63', '3.0000'
'62', '5.0000'
'59', '1.0000'
'58', '3.0000'
'57', '4.0000'
'55', '4.5000'
'52', '3.6667'
'51', '3.2500'
'50', '2.6667'
'49', '3.5000'
'48', '3.0000'
'47', '5.5000'
'46', '4.3333'
'45', '1.0000'
'44', '2.0000'
'43', '3.0000'
'42', '3.7500'
'41', '5.5000'
'40', '4.0000'
'39', '3.0000'
'38', '2.0000'
'35', '5.5000'
'33', '3.0000'
'31', '10.0000'
'30', '4.5000'
'29', '2.0000'
'27', '2.0000'
'26', '3.6667'
'24', '4.5000'
'23', '2.0000'
'22', '5.0000'
'21', '3.0000'
'20', '4.5000'
'19', '5.5000'
'18', '5.0000'
'17', '6.0000'
'15', '2.3333'


-- C.Q13. The oldest and the youngest clients of the library

/* For this query, I mainly used a WHERE clause to filter out the dates equal to the MAX or equal to the MIN. I'm sure there's a fancier way to do it, but this still achieves the same result.*/

SELECT ClientFirstName, ClientLastName, ClientDoB
FROM Client
WHERE ClientDoB = (SELECT MAX(ClientDoB) FROM Client) OR ClientDoB = (SELECT MIN(ClientDoB) FROM Client)

-- RESULTS: 

ClientFirstName, ClientLastName, ClientDoB
'Mya', 'Austin', '1960'
'Caroline', 'Clark', '1960'
'Annabel', 'Williamson', '1960'
'Alina', 'Morton', '2010'
'Alina', 'Austin', '2010'
'Joan', 'Grant', '2010'


-- C.Q14. First and last names of authors that wrote books in more than one genre

/*First I can SELECT a table of AuthorfirstName,AuthorLastName, and Genre to use as a subquery (Author_Genres). 
Then I can SELECT from that table to COUNT the number of DISTINCT Genres, grouping by Author. I can filter the results by only including Authors HAVING more than one Genre. 
Looking at the result, it seems like there are no authors that wrote in more than one genre. */

SELECT AuthorFirstName, AuthorLastName, COUNT(DISTINCT Genre) AS Distinct_Genres
FROM (
	SELECT AuthorFirstName, AuthorLastName, BookTitle, Genre
	FROM Book
	INNER JOIN Author ON Book.BookAuthor = Author.AuthorID
	ORDER BY AuthorFirstName
	)Author_Genres
GROUP BY AuthorFirstName, AuthorLastName, Genre
HAVING Distinct_Genres > 1

- RESULTS: 

AuthorFirstName, AuthorLastName, Distinct_Genres
